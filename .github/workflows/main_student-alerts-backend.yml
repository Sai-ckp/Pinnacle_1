name: Build and deploy Python app to Azure Web App - student-alerts-backend

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: student_alerts_app.deployment
      PYTHON_VERSION: '3.9'

    steps:
      # ✅ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # ✅ Install system dependencies for WeasyPrint
      - name: Install system dependencies for WeasyPrint
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcairo2 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libgdk-pixbuf2.0-0 \
            libffi-dev \
            shared-mime-info

      # ✅ Install Python dependencies
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # ✅ Run collectstatic (static files)
      - name: Run collectstatic
        run: |
          source venv/bin/activate
          python manage.py collectstatic --noinput

      # ✅ Run migrations
      - name: Run migrations
        run: |
          source venv/bin/activate
          python manage.py migrate --noinput

      # ✅ Prepare a clean artifact for deployment
      - name: Prepare artifact for deployment
        run: |
          mkdir -p release

          # Copy required Django files
          cp manage.py requirements.txt release/

          # Copy all project apps
          cp -r student_alerts_app release/
          [ -d "license" ] && cp -r license release/
          [ -d "admission" ] && cp -r admission release/
          [ -d "master" ] && cp -r master release/
          [ -d "attendence" ] && cp -r attendence release/

          # Copy templates/static (if not inside app folders)
          [ -d "templates" ] && cp -r templates release/
          [ -d "static" ] && cp -r static release/

      # ✅ Upload the artifact for deployment
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: django-release
          path: release/

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # ✅ Download the build artifact
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: django-release
          path: .

      # ✅ List files (debugging)
      - name: List files before deployment
        run: find . -type f | head -n 50

      # ✅ Login to Azure using OIDC
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_365CC9311E4C4A2487CB1BAA01746F7A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_0EB78AC662B5425DBACE369EDF555C0B }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_72AC7174F5C444C1BE9DEAD7A37582D5 }}

      # ✅ Set environment variables in Azure App Service
      - name: Set environment variables
        uses: azure/cli@v1
        with:
          inlineScript: |
            az webapp config appsettings set \
              --name student-alerts-backend \
              --resource-group "pinnacle-college" \
              --settings \
              DB_NAME=${{ secrets.DB_NAME }} \
              DB_USER=${{ secrets.DB_USER }} \
              DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              DB_HOST=${{ secrets.DB_HOST }} \
              DB_PORT=${{ secrets.DB_PORT }} \
              DJANGO_SETTINGS_MODULE=student_alerts_app.deployment \
              PYTHON_VERSION=3.9

      # ✅ Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'student-alerts-backend'
          slot-name: 'Production'
          package: '.'
