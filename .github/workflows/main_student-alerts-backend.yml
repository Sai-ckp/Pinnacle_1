name: Build and deploy Django app to Azure Web App - student-alerts-backend

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      APP_NAME: student-alerts-backend
      RESOURCE_GROUP: pinnacle-college
      DJANGO_SETTINGS_MODULE: student_alerts_app.deployment

    steps:
      # ✅ Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ Step 2: Install required OS dependencies (for WeasyPrint, etc.)
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcairo2 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libgdk-pixbuf2.0-0 \
            libffi-dev \
            shared-mime-info

      # ✅ Step 3: Set up Python 3.9
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # ✅ Step 4: Cache pip dependencies to reduce install time
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ✅ Step 5: Install dependencies
      - name: Install Python dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # ✅ Step 6: Collect static files
      - name: Collect static files
        run: |
          source venv/bin/activate
          python manage.py collectstatic --noinput || true

      # ✅ Step 7: Login to Azure
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_365CC9311E4C4A2487CB1BAA01746F7A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_0EB78AC662B5425DBACE369EDF555C0B }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_72AC7174F5C444C1BE9DEAD7A37582D5 }}

      # ✅ Step 8: Set environment variables in Azure
      - name: Set environment variables in Azure App Service
        uses: azure/cli@v1
        with:
          inlineScript: |
            az webapp config appsettings set \
              --name ${{ env.APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --settings \
              DJANGO_SETTINGS_MODULE=${{ env.DJANGO_SETTINGS_MODULE }} \
              DB_NAME='${{ secrets.DB_NAME }}' \
              DB_USER='${{ secrets.DB_USER }}' \
              DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              DB_HOST='${{ secrets.DB_HOST }}' \
              DB_PORT='${{ secrets.DB_PORT }}'

      # ✅ Step 9: Direct deploy (no ZIP or artifact)
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          slot-name: 'Production'
          package: .

      # ✅ Step 10: Trigger migrations automatically
      # Instead of SSH, call Django migrate endpoint via Kudu API
      - name: Run Django migrations via Azure Kudu API
        env:
          APP_URL: ${{ env.APP_NAME }}.scm.azurewebsites.net
        run: |
          echo "Triggering Django migrations inside Azure Web App..."
          curl -X POST "https://${{ env.APP_URL }}/api/command" \
            -u \$${{ env.APP_NAME }}:"${{ secrets.AZURE_DEPLOYMENT_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -d '{"command":"cd /home/site/wwwroot && python manage.py migrate --noinput"}' || true
