name: Build and deploy Django app to Azure Web App - student-alerts-backend

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      APP_NAME: student-alerts-backend
      RESOURCE_GROUP: pinnacle-college

    steps:
      # ✅ Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ Step 2: Install system dependencies (for WeasyPrint, etc.)
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcairo2 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libgdk-pixbuf2.0-0 \
            libffi-dev \
            shared-mime-info

      # ✅ Step 3: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # ✅ Step 4: Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # ✅ Step 5: Collect static files
      - name: Collect static files
        env:
          DJANGO_SETTINGS_MODULE: student_alerts_app.deployment
        run: |
          source venv/bin/activate
          python manage.py collectstatic --noinput || true

      # ✅ Step 6: Prepare ZIP for deployment
      - name: Prepare deployable package
        run: |
          echo "Preparing deployment package..."
          mkdir -p deploy
          rsync -av --exclude='venv' --exclude='.git' --exclude='.github' \
                    --exclude='__pycache__' --exclude='*.pyc' \
                    --exclude='*.log' --exclude='*.sqlite3' \
                    ./ ./deploy/
          cd deploy
          zip -r ../deploy.zip . >/dev/null
          cd ..
          echo "✅ Package ready: $(du -h deploy.zip | cut -f1)"

      # ✅ Step 7: Login to Azure
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_365CC9311E4C4A2487CB1BAA01746F7A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_0EB78AC662B5425DBACE369EDF555C0B }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_72AC7174F5C444C1BE9DEAD7A37582D5 }}

      # ✅ Step 8: Set environment variables on Azure App
      - name: Set Azure App Settings
        uses: azure/cli@v1
        with:
          inlineScript: |
            az webapp config appsettings set \
              --name ${{ env.APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --settings \
              DJANGO_SETTINGS_MODULE=student_alerts_app.deployment \
              DB_NAME='${{ secrets.DB_NAME }}' \
              DB_USER='${{ secrets.DB_USER }}' \
              DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              DB_HOST='${{ secrets.DB_HOST }}' \
              DB_PORT='${{ secrets.DB_PORT }}'

      # ✅ Step 9: Deploy ZIP to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          package: deploy.zip

      # ✅ Step 10: Run Django migrations (new method)
      # We'll run commands INSIDE the container via Kudu API instead of az webapp ssh
      - name: Run Django migrations in Azure
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "Running Django migrations inside Azure Web App..."
            az webapp ssh --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --timeout 30 || true
            az webapp create-remote-connection --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --port 2222 &
            sleep 20
            curl -X POST "https://${{ env.APP_NAME }}.scm.azurewebsites.net/api/command" \
              -u "\$${{ env.APP_NAME }}" \
              -d '{"command":"cd /home/site/wwwroot && python manage.py migrate --noinput"}' \
              -H "Content-Type: application/json"
